import pandas as pd

def compare_columns(merged_df, key_column, column_pairs):
    """
    Compare specified columns from a merged dataframe and return discrepancies in separate lists.

    Parameters:
    merged_df (pd.DataFrame): Merged DataFrame.
    key_column (str): Column name to identify rows.
    column_pairs (list of tuples): List of tuples where each tuple contains two column names to compare (col_df1, col_df2).

    Returns:
    dict of pd.DataFrames: Dictionary where keys are the comparison labels and values are DataFrames with discrepancies.
    """
    
    # Initialize a dictionary to store discrepancy DataFrames
    discrepancies_dict = {}
    
    # Iterate over each pair of columns
    for col1, col2 in column_pairs:
        # Find rows where the values in the columns are not equal
        discrepancies = merged_df[merged_df[col1] != merged_df[col2]]
        
        # If there are discrepancies, add them to the dictionary
        if not discrepancies.empty:
            discrepancies_dict[f"{col1}-{col2}"] = discrepancies[[key_column, col1, col2]]
    
    return discrepancies_dict

# Example usage
df1 = pd.DataFrame({
    'key': ['A', 'B', 'C'],
    'value1': [1, 2, 3],
    'value2': [4, 5, 6]
})

df2 = pd.DataFrame({
    'key': ['B', 'C', 'D'],
    'value2': [3, 5, 6],
    'value3': [7, 6, 7]
})

# Merge the dataframes on the key column
merged_df = pd.merge(df1, df2, on='key', suffixes=('_df1', '_df2'))

# Specify the columns to compare
column_pairs = [('value1_df1', 'value2_df1'), ('value2_df1', 'value3_df2')]

# Call the function and get the result
discrepancies_dict = compare_columns(merged_df, 'key', column_pairs)

# Print discrepancies for each column pair
for comparison, df in discrepancies_dict.items():
    print(f"Discrepancies for {comparison}:\n", df, "\n")
