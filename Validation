import pandas as pd

def validate_access(df):
  """Validates the Access column based on ID and DateOfBirth.

  Args:
    df: The pandas DataFrame.

  Returns:
    A list of tuples containing the row index and the error message for invalid Access values.
  """

  df['DateOfBirth'] = pd.to_datetime(df['DateOfBirth'], format='%d/%m/%Y')
  df['Access_Calculated'] = df['ID'].astype(str) + df['DateOfBirth'].dt.strftime('%d%m%Y')
  errors = []
  for index, row in df.iterrows():
    if row['Access'] != row['Access_Calculated']:
      errors.append((index, f"Access mismatch at row {index + 1}: Expected {row['Access_Calculated']}, found {row['Access']}"))
  return errors

# Sample DataFrame
data = {'ID': ['G12345', 'G67890'],
        'DateOfBirth': ['24/09/1974', '15/12/1980'],
        'Access': ['G1234524091974', 'G6789015121980']}
df = pd.DataFrame(data)

errors = validate_access(df)
if errors:
  print("Errors found:")
  for error in errors:
    print(error)
else:
  print("No errors found.")
