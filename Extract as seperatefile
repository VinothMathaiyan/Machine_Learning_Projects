import pandas as pd

def extract_df_with_unavailable_or_duplicates(df, value, column):
    """
    Extract rows with a specific value in a column or duplicate values in a column.
    
    Parameters:
        df (pandas.DataFrame): The DataFrame to check.
        value (str): The value to search for.
        column (str): The name of the column to check for duplicates.
        
    Returns:
        pandas.DataFrame: A DataFrame containing rows with the specified value or duplicate values.
    """
    # Filter rows with the specified value
    rows_with_value = df[df[column] == value]
    
    # Filter rows with duplicate values in the specified column
    duplicate_rows = df[df.duplicated(subset=[column], keep=False)]
    
    # Concatenate both filtered DataFrames
    result_df = pd.concat([rows_with_value, duplicate_rows])
    
    return result_df

# Example usage:
# Assuming 'df' is your DataFrame
value_to_search = "Unavailable"
column_to_check = "email_id"

result_df = extract_df_with_unavailable_or_duplicates(df, value_to_search, column_to_check)

print("DataFrame containing rows with 'Unavailable' value or duplicate email ids:")
print(result_df)


import pandas as pd

def extract_excluded_df(df, result_df):
    """
    Extract another DataFrame by excluding rows that are present in the result_df.
    
    Parameters:
        df (pandas.DataFrame): The original DataFrame.
        result_df (pandas.DataFrame): The DataFrame containing rows to be excluded.
        
    Returns:
        pandas.DataFrame: A DataFrame containing rows from the original DataFrame excluding those in result_df.
    """
    # Merge the DataFrames and identify the rows present in result_df
    merged_df = df.merge(result_df, how='left', indicator=True)
    
    # Filter out the rows present in result_df
    excluded_df = merged_df[merged_df['_merge'] == 'left_only']
    
    # Drop the indicator column
    excluded_df.drop('_merge', axis=1, inplace=True)
    
    return excluded_df

# Example usage:
# Assuming 'df' is your original DataFrame and 'result_df' is the DataFrame containing rows to be excluded
excluded_df = extract_excluded_df(df, result_df)

print("DataFrame excluding rows present in result_df:")
print(excluded_df)


import pandas as pd
import re

def is_email_valid(email):
    """
    Validate an email address using a regular expression.
    
    Parameters:
        email (str): The email address to validate.
        
    Returns:
        bool: True if the email is valid, False otherwise.
    """
    regex_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    if re.match(regex_pattern, email):
        return True
    else:
        return False

def find_invalid_emails(df, email_column):
    """
    Find invalid emails in a specified column of a DataFrame.
    
    Parameters:
        df (pandas.DataFrame): The DataFrame containing the email column.
        email_column (str): The name of the column containing email addresses.
        
    Returns:
        list: A list of invalid email addresses.
    """
    # Use a lambda function to check each email
    invalid_emails = df[~df[email_column].apply(is_email_valid)][email_column]
    return invalid_emails.tolist()

# Example usage:
# Assuming 'df' is your DataFrame and it contains a column named 'email'
email_column_name = 'email'
invalid_emails = find_invalid_emails(df, email_column_name)

if invalid_emails:
    print("Invalid emails found:")
    for email in invalid_emails:
        print(email)
else:
    print("All emails are valid.")

